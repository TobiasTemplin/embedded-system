
Embedded_Systems_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000540  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000782  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000639  00000000  00000000  00000d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031c  00000000  00000000  00001357  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001674  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000392  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  00001a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001a81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 44 00 	call	0x88	; 0x88 <main>
  80:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <main>:
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
  88:	cf 93       	push	r28
  8a:	df 93       	push	r29
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
  90:	6c 97       	sbiw	r28, 0x1c	; 28
  92:	0f b6       	in	r0, 0x3f	; 63
  94:	f8 94       	cli
  96:	de bf       	out	0x3e, r29	; 62
  98:	0f be       	out	0x3f, r0	; 63
  9a:	cd bf       	out	0x3d, r28	; 61
    
	DDRB = 0x01; // set lowermost bit in Port B as output
  9c:	87 e3       	ldi	r24, 0x37	; 55
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	fc 01       	movw	r30, r24
  a4:	20 83       	st	Z, r18
	
    while (1) 
    {
		PORTB = 0x01;// Set lowermost bit in Port B to high, others to low
  a6:	88 e3       	ldi	r24, 0x38	; 56
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	fc 01       	movw	r30, r24
  ae:	20 83       	st	Z, r18
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	a8 ec       	ldi	r26, 0xC8	; 200
  b6:	b2 e4       	ldi	r27, 0x42	; 66
  b8:	89 83       	std	Y+1, r24	; 0x01
  ba:	9a 83       	std	Y+2, r25	; 0x02
  bc:	ab 83       	std	Y+3, r26	; 0x03
  be:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  c0:	2a e9       	ldi	r18, 0x9A	; 154
  c2:	39 e9       	ldi	r19, 0x99	; 153
  c4:	49 e9       	ldi	r20, 0x99	; 153
  c6:	54 e4       	ldi	r21, 0x44	; 68
  c8:	69 81       	ldd	r22, Y+1	; 0x01
  ca:	7a 81       	ldd	r23, Y+2	; 0x02
  cc:	8b 81       	ldd	r24, Y+3	; 0x03
  ce:	9c 81       	ldd	r25, Y+4	; 0x04
  d0:	0e 94 c7 01 	call	0x38e	; 0x38e <__mulsf3>
  d4:	dc 01       	movw	r26, r24
  d6:	cb 01       	movw	r24, r22
  d8:	8b 8b       	std	Y+19, r24	; 0x13
  da:	9c 8b       	std	Y+20, r25	; 0x14
  dc:	ad 8b       	std	Y+21, r26	; 0x15
  de:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	40 e8       	ldi	r20, 0x80	; 128
  e6:	5f e3       	ldi	r21, 0x3F	; 63
  e8:	6b 89       	ldd	r22, Y+19	; 0x13
  ea:	7c 89       	ldd	r23, Y+20	; 0x14
  ec:	8d 89       	ldd	r24, Y+21	; 0x15
  ee:	9e 89       	ldd	r25, Y+22	; 0x16
  f0:	0e 94 41 01 	call	0x282	; 0x282 <__cmpsf2>
  f4:	88 23       	and	r24, r24
  f6:	2c f4       	brge	.+10     	; 0x102 <main+0x7a>
		__ticks = 1;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	98 8f       	std	Y+24, r25	; 0x18
  fe:	8f 8b       	std	Y+23, r24	; 0x17
 100:	3f c0       	rjmp	.+126    	; 0x180 <main+0xf8>
	else if (__tmp > 65535)
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	3f ef       	ldi	r19, 0xFF	; 255
 106:	4f e7       	ldi	r20, 0x7F	; 127
 108:	57 e4       	ldi	r21, 0x47	; 71
 10a:	6b 89       	ldd	r22, Y+19	; 0x13
 10c:	7c 89       	ldd	r23, Y+20	; 0x14
 10e:	8d 89       	ldd	r24, Y+21	; 0x15
 110:	9e 89       	ldd	r25, Y+22	; 0x16
 112:	0e 94 c2 01 	call	0x384	; 0x384 <__gesf2>
 116:	18 16       	cp	r1, r24
 118:	4c f5       	brge	.+82     	; 0x16c <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	40 e2       	ldi	r20, 0x20	; 32
 120:	51 e4       	ldi	r21, 0x41	; 65
 122:	69 81       	ldd	r22, Y+1	; 0x01
 124:	7a 81       	ldd	r23, Y+2	; 0x02
 126:	8b 81       	ldd	r24, Y+3	; 0x03
 128:	9c 81       	ldd	r25, Y+4	; 0x04
 12a:	0e 94 c7 01 	call	0x38e	; 0x38e <__mulsf3>
 12e:	dc 01       	movw	r26, r24
 130:	cb 01       	movw	r24, r22
 132:	bc 01       	movw	r22, r24
 134:	cd 01       	movw	r24, r26
 136:	0e 94 46 01 	call	0x28c	; 0x28c <__fixunssfsi>
 13a:	dc 01       	movw	r26, r24
 13c:	cb 01       	movw	r24, r22
 13e:	98 8f       	std	Y+24, r25	; 0x18
 140:	8f 8b       	std	Y+23, r24	; 0x17
 142:	0f c0       	rjmp	.+30     	; 0x162 <main+0xda>
 144:	8a e7       	ldi	r24, 0x7A	; 122
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	9a 8f       	std	Y+26, r25	; 0x1a
 14a:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 14c:	89 8d       	ldd	r24, Y+25	; 0x19
 14e:	9a 8d       	ldd	r25, Y+26	; 0x1a
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <main+0xc8>
 154:	9a 8f       	std	Y+26, r25	; 0x1a
 156:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 158:	8f 89       	ldd	r24, Y+23	; 0x17
 15a:	98 8d       	ldd	r25, Y+24	; 0x18
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	98 8f       	std	Y+24, r25	; 0x18
 160:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 162:	8f 89       	ldd	r24, Y+23	; 0x17
 164:	98 8d       	ldd	r25, Y+24	; 0x18
 166:	89 2b       	or	r24, r25
 168:	69 f7       	brne	.-38     	; 0x144 <main+0xbc>
 16a:	14 c0       	rjmp	.+40     	; 0x194 <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 16c:	6b 89       	ldd	r22, Y+19	; 0x13
 16e:	7c 89       	ldd	r23, Y+20	; 0x14
 170:	8d 89       	ldd	r24, Y+21	; 0x15
 172:	9e 89       	ldd	r25, Y+22	; 0x16
 174:	0e 94 46 01 	call	0x28c	; 0x28c <__fixunssfsi>
 178:	dc 01       	movw	r26, r24
 17a:	cb 01       	movw	r24, r22
 17c:	98 8f       	std	Y+24, r25	; 0x18
 17e:	8f 8b       	std	Y+23, r24	; 0x17
 180:	8f 89       	ldd	r24, Y+23	; 0x17
 182:	98 8d       	ldd	r25, Y+24	; 0x18
 184:	9c 8f       	std	Y+28, r25	; 0x1c
 186:	8b 8f       	std	Y+27, r24	; 0x1b
 188:	8b 8d       	ldd	r24, Y+27	; 0x1b
 18a:	9c 8d       	ldd	r25, Y+28	; 0x1c
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <main+0x104>
 190:	9c 8f       	std	Y+28, r25	; 0x1c
 192:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(100);
		PORTB = 0x00;// Set all bits in Port B to low
 194:	88 e3       	ldi	r24, 0x38	; 56
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	fc 01       	movw	r30, r24
 19a:	10 82       	st	Z, r1
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	a8 ec       	ldi	r26, 0xC8	; 200
 1a2:	b2 e4       	ldi	r27, 0x42	; 66
 1a4:	8d 83       	std	Y+5, r24	; 0x05
 1a6:	9e 83       	std	Y+6, r25	; 0x06
 1a8:	af 83       	std	Y+7, r26	; 0x07
 1aa:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1ac:	2a e9       	ldi	r18, 0x9A	; 154
 1ae:	39 e9       	ldi	r19, 0x99	; 153
 1b0:	49 e9       	ldi	r20, 0x99	; 153
 1b2:	54 e4       	ldi	r21, 0x44	; 68
 1b4:	6d 81       	ldd	r22, Y+5	; 0x05
 1b6:	7e 81       	ldd	r23, Y+6	; 0x06
 1b8:	8f 81       	ldd	r24, Y+7	; 0x07
 1ba:	98 85       	ldd	r25, Y+8	; 0x08
 1bc:	0e 94 c7 01 	call	0x38e	; 0x38e <__mulsf3>
 1c0:	dc 01       	movw	r26, r24
 1c2:	cb 01       	movw	r24, r22
 1c4:	89 87       	std	Y+9, r24	; 0x09
 1c6:	9a 87       	std	Y+10, r25	; 0x0a
 1c8:	ab 87       	std	Y+11, r26	; 0x0b
 1ca:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	40 e8       	ldi	r20, 0x80	; 128
 1d2:	5f e3       	ldi	r21, 0x3F	; 63
 1d4:	69 85       	ldd	r22, Y+9	; 0x09
 1d6:	7a 85       	ldd	r23, Y+10	; 0x0a
 1d8:	8b 85       	ldd	r24, Y+11	; 0x0b
 1da:	9c 85       	ldd	r25, Y+12	; 0x0c
 1dc:	0e 94 41 01 	call	0x282	; 0x282 <__cmpsf2>
 1e0:	88 23       	and	r24, r24
 1e2:	2c f4       	brge	.+10     	; 0x1ee <main+0x166>
		__ticks = 1;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	9e 87       	std	Y+14, r25	; 0x0e
 1ea:	8d 87       	std	Y+13, r24	; 0x0d
 1ec:	3f c0       	rjmp	.+126    	; 0x26c <__EEPROM_REGION_LENGTH__+0x6c>
	else if (__tmp > 65535)
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	3f ef       	ldi	r19, 0xFF	; 255
 1f2:	4f e7       	ldi	r20, 0x7F	; 127
 1f4:	57 e4       	ldi	r21, 0x47	; 71
 1f6:	69 85       	ldd	r22, Y+9	; 0x09
 1f8:	7a 85       	ldd	r23, Y+10	; 0x0a
 1fa:	8b 85       	ldd	r24, Y+11	; 0x0b
 1fc:	9c 85       	ldd	r25, Y+12	; 0x0c
 1fe:	0e 94 c2 01 	call	0x384	; 0x384 <__gesf2>
 202:	18 16       	cp	r1, r24
 204:	4c f5       	brge	.+82     	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 206:	20 e0       	ldi	r18, 0x00	; 0
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	40 e2       	ldi	r20, 0x20	; 32
 20c:	51 e4       	ldi	r21, 0x41	; 65
 20e:	6d 81       	ldd	r22, Y+5	; 0x05
 210:	7e 81       	ldd	r23, Y+6	; 0x06
 212:	8f 81       	ldd	r24, Y+7	; 0x07
 214:	98 85       	ldd	r25, Y+8	; 0x08
 216:	0e 94 c7 01 	call	0x38e	; 0x38e <__mulsf3>
 21a:	dc 01       	movw	r26, r24
 21c:	cb 01       	movw	r24, r22
 21e:	bc 01       	movw	r22, r24
 220:	cd 01       	movw	r24, r26
 222:	0e 94 46 01 	call	0x28c	; 0x28c <__fixunssfsi>
 226:	dc 01       	movw	r26, r24
 228:	cb 01       	movw	r24, r22
 22a:	9e 87       	std	Y+14, r25	; 0x0e
 22c:	8d 87       	std	Y+13, r24	; 0x0d
 22e:	0f c0       	rjmp	.+30     	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
 230:	8a e7       	ldi	r24, 0x7A	; 122
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	98 8b       	std	Y+16, r25	; 0x10
 236:	8f 87       	std	Y+15, r24	; 0x0f
 238:	8f 85       	ldd	r24, Y+15	; 0x0f
 23a:	98 89       	ldd	r25, Y+16	; 0x10
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>
 240:	98 8b       	std	Y+16, r25	; 0x10
 242:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 244:	8d 85       	ldd	r24, Y+13	; 0x0d
 246:	9e 85       	ldd	r25, Y+14	; 0x0e
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	9e 87       	std	Y+14, r25	; 0x0e
 24c:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 24e:	8d 85       	ldd	r24, Y+13	; 0x0d
 250:	9e 85       	ldd	r25, Y+14	; 0x0e
 252:	89 2b       	or	r24, r25
 254:	69 f7       	brne	.-38     	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
 256:	14 c0       	rjmp	.+40     	; 0x280 <__EEPROM_REGION_LENGTH__+0x80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 258:	69 85       	ldd	r22, Y+9	; 0x09
 25a:	7a 85       	ldd	r23, Y+10	; 0x0a
 25c:	8b 85       	ldd	r24, Y+11	; 0x0b
 25e:	9c 85       	ldd	r25, Y+12	; 0x0c
 260:	0e 94 46 01 	call	0x28c	; 0x28c <__fixunssfsi>
 264:	dc 01       	movw	r26, r24
 266:	cb 01       	movw	r24, r22
 268:	9e 87       	std	Y+14, r25	; 0x0e
 26a:	8d 87       	std	Y+13, r24	; 0x0d
 26c:	8d 85       	ldd	r24, Y+13	; 0x0d
 26e:	9e 85       	ldd	r25, Y+14	; 0x0e
 270:	9a 8b       	std	Y+18, r25	; 0x12
 272:	89 8b       	std	Y+17, r24	; 0x11
 274:	89 89       	ldd	r24, Y+17	; 0x11
 276:	9a 89       	ldd	r25, Y+18	; 0x12
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <__EEPROM_REGION_LENGTH__+0x78>
 27c:	9a 8b       	std	Y+18, r25	; 0x12
 27e:	89 8b       	std	Y+17, r24	; 0x11
		_delay_ms(100);
    }
 280:	12 cf       	rjmp	.-476    	; 0xa6 <main+0x1e>

00000282 <__cmpsf2>:
 282:	0e 94 75 01 	call	0x2ea	; 0x2ea <__fp_cmp>
 286:	08 f4       	brcc	.+2      	; 0x28a <__cmpsf2+0x8>
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	08 95       	ret

0000028c <__fixunssfsi>:
 28c:	0e 94 a1 01 	call	0x342	; 0x342 <__fp_splitA>
 290:	88 f0       	brcs	.+34     	; 0x2b4 <__fixunssfsi+0x28>
 292:	9f 57       	subi	r25, 0x7F	; 127
 294:	98 f0       	brcs	.+38     	; 0x2bc <__fixunssfsi+0x30>
 296:	b9 2f       	mov	r27, r25
 298:	99 27       	eor	r25, r25
 29a:	b7 51       	subi	r27, 0x17	; 23
 29c:	b0 f0       	brcs	.+44     	; 0x2ca <__fixunssfsi+0x3e>
 29e:	e1 f0       	breq	.+56     	; 0x2d8 <__fixunssfsi+0x4c>
 2a0:	66 0f       	add	r22, r22
 2a2:	77 1f       	adc	r23, r23
 2a4:	88 1f       	adc	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	1a f0       	brmi	.+6      	; 0x2b0 <__fixunssfsi+0x24>
 2aa:	ba 95       	dec	r27
 2ac:	c9 f7       	brne	.-14     	; 0x2a0 <__fixunssfsi+0x14>
 2ae:	14 c0       	rjmp	.+40     	; 0x2d8 <__fixunssfsi+0x4c>
 2b0:	b1 30       	cpi	r27, 0x01	; 1
 2b2:	91 f0       	breq	.+36     	; 0x2d8 <__fixunssfsi+0x4c>
 2b4:	0e 94 bb 01 	call	0x376	; 0x376 <__fp_zero>
 2b8:	b1 e0       	ldi	r27, 0x01	; 1
 2ba:	08 95       	ret
 2bc:	0c 94 bb 01 	jmp	0x376	; 0x376 <__fp_zero>
 2c0:	67 2f       	mov	r22, r23
 2c2:	78 2f       	mov	r23, r24
 2c4:	88 27       	eor	r24, r24
 2c6:	b8 5f       	subi	r27, 0xF8	; 248
 2c8:	39 f0       	breq	.+14     	; 0x2d8 <__fixunssfsi+0x4c>
 2ca:	b9 3f       	cpi	r27, 0xF9	; 249
 2cc:	cc f3       	brlt	.-14     	; 0x2c0 <__fixunssfsi+0x34>
 2ce:	86 95       	lsr	r24
 2d0:	77 95       	ror	r23
 2d2:	67 95       	ror	r22
 2d4:	b3 95       	inc	r27
 2d6:	d9 f7       	brne	.-10     	; 0x2ce <__fixunssfsi+0x42>
 2d8:	3e f4       	brtc	.+14     	; 0x2e8 <__fixunssfsi+0x5c>
 2da:	90 95       	com	r25
 2dc:	80 95       	com	r24
 2de:	70 95       	com	r23
 2e0:	61 95       	neg	r22
 2e2:	7f 4f       	sbci	r23, 0xFF	; 255
 2e4:	8f 4f       	sbci	r24, 0xFF	; 255
 2e6:	9f 4f       	sbci	r25, 0xFF	; 255
 2e8:	08 95       	ret

000002ea <__fp_cmp>:
 2ea:	99 0f       	add	r25, r25
 2ec:	00 08       	sbc	r0, r0
 2ee:	55 0f       	add	r21, r21
 2f0:	aa 0b       	sbc	r26, r26
 2f2:	e0 e8       	ldi	r30, 0x80	; 128
 2f4:	fe ef       	ldi	r31, 0xFE	; 254
 2f6:	16 16       	cp	r1, r22
 2f8:	17 06       	cpc	r1, r23
 2fa:	e8 07       	cpc	r30, r24
 2fc:	f9 07       	cpc	r31, r25
 2fe:	c0 f0       	brcs	.+48     	; 0x330 <__fp_cmp+0x46>
 300:	12 16       	cp	r1, r18
 302:	13 06       	cpc	r1, r19
 304:	e4 07       	cpc	r30, r20
 306:	f5 07       	cpc	r31, r21
 308:	98 f0       	brcs	.+38     	; 0x330 <__fp_cmp+0x46>
 30a:	62 1b       	sub	r22, r18
 30c:	73 0b       	sbc	r23, r19
 30e:	84 0b       	sbc	r24, r20
 310:	95 0b       	sbc	r25, r21
 312:	39 f4       	brne	.+14     	; 0x322 <__fp_cmp+0x38>
 314:	0a 26       	eor	r0, r26
 316:	61 f0       	breq	.+24     	; 0x330 <__fp_cmp+0x46>
 318:	23 2b       	or	r18, r19
 31a:	24 2b       	or	r18, r20
 31c:	25 2b       	or	r18, r21
 31e:	21 f4       	brne	.+8      	; 0x328 <__fp_cmp+0x3e>
 320:	08 95       	ret
 322:	0a 26       	eor	r0, r26
 324:	09 f4       	brne	.+2      	; 0x328 <__fp_cmp+0x3e>
 326:	a1 40       	sbci	r26, 0x01	; 1
 328:	a6 95       	lsr	r26
 32a:	8f ef       	ldi	r24, 0xFF	; 255
 32c:	81 1d       	adc	r24, r1
 32e:	81 1d       	adc	r24, r1
 330:	08 95       	ret

00000332 <__fp_split3>:
 332:	57 fd       	sbrc	r21, 7
 334:	90 58       	subi	r25, 0x80	; 128
 336:	44 0f       	add	r20, r20
 338:	55 1f       	adc	r21, r21
 33a:	59 f0       	breq	.+22     	; 0x352 <__fp_splitA+0x10>
 33c:	5f 3f       	cpi	r21, 0xFF	; 255
 33e:	71 f0       	breq	.+28     	; 0x35c <__fp_splitA+0x1a>
 340:	47 95       	ror	r20

00000342 <__fp_splitA>:
 342:	88 0f       	add	r24, r24
 344:	97 fb       	bst	r25, 7
 346:	99 1f       	adc	r25, r25
 348:	61 f0       	breq	.+24     	; 0x362 <__fp_splitA+0x20>
 34a:	9f 3f       	cpi	r25, 0xFF	; 255
 34c:	79 f0       	breq	.+30     	; 0x36c <__fp_splitA+0x2a>
 34e:	87 95       	ror	r24
 350:	08 95       	ret
 352:	12 16       	cp	r1, r18
 354:	13 06       	cpc	r1, r19
 356:	14 06       	cpc	r1, r20
 358:	55 1f       	adc	r21, r21
 35a:	f2 cf       	rjmp	.-28     	; 0x340 <__fp_split3+0xe>
 35c:	46 95       	lsr	r20
 35e:	f1 df       	rcall	.-30     	; 0x342 <__fp_splitA>
 360:	08 c0       	rjmp	.+16     	; 0x372 <__fp_splitA+0x30>
 362:	16 16       	cp	r1, r22
 364:	17 06       	cpc	r1, r23
 366:	18 06       	cpc	r1, r24
 368:	99 1f       	adc	r25, r25
 36a:	f1 cf       	rjmp	.-30     	; 0x34e <__fp_splitA+0xc>
 36c:	86 95       	lsr	r24
 36e:	71 05       	cpc	r23, r1
 370:	61 05       	cpc	r22, r1
 372:	08 94       	sec
 374:	08 95       	ret

00000376 <__fp_zero>:
 376:	e8 94       	clt

00000378 <__fp_szero>:
 378:	bb 27       	eor	r27, r27
 37a:	66 27       	eor	r22, r22
 37c:	77 27       	eor	r23, r23
 37e:	cb 01       	movw	r24, r22
 380:	97 f9       	bld	r25, 7
 382:	08 95       	ret

00000384 <__gesf2>:
 384:	0e 94 75 01 	call	0x2ea	; 0x2ea <__fp_cmp>
 388:	08 f4       	brcc	.+2      	; 0x38c <__gesf2+0x8>
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	08 95       	ret

0000038e <__mulsf3>:
 38e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__mulsf3x>
 392:	0c 94 4b 02 	jmp	0x496	; 0x496 <__fp_round>
 396:	0e 94 3d 02 	call	0x47a	; 0x47a <__fp_pscA>
 39a:	38 f0       	brcs	.+14     	; 0x3aa <__mulsf3+0x1c>
 39c:	0e 94 44 02 	call	0x488	; 0x488 <__fp_pscB>
 3a0:	20 f0       	brcs	.+8      	; 0x3aa <__mulsf3+0x1c>
 3a2:	95 23       	and	r25, r21
 3a4:	11 f0       	breq	.+4      	; 0x3aa <__mulsf3+0x1c>
 3a6:	0c 94 34 02 	jmp	0x468	; 0x468 <__fp_inf>
 3aa:	0c 94 3a 02 	jmp	0x474	; 0x474 <__fp_nan>
 3ae:	11 24       	eor	r1, r1
 3b0:	0c 94 bc 01 	jmp	0x378	; 0x378 <__fp_szero>

000003b4 <__mulsf3x>:
 3b4:	0e 94 99 01 	call	0x332	; 0x332 <__fp_split3>
 3b8:	70 f3       	brcs	.-36     	; 0x396 <__mulsf3+0x8>

000003ba <__mulsf3_pse>:
 3ba:	95 9f       	mul	r25, r21
 3bc:	c1 f3       	breq	.-16     	; 0x3ae <__mulsf3+0x20>
 3be:	95 0f       	add	r25, r21
 3c0:	50 e0       	ldi	r21, 0x00	; 0
 3c2:	55 1f       	adc	r21, r21
 3c4:	62 9f       	mul	r22, r18
 3c6:	f0 01       	movw	r30, r0
 3c8:	72 9f       	mul	r23, r18
 3ca:	bb 27       	eor	r27, r27
 3cc:	f0 0d       	add	r31, r0
 3ce:	b1 1d       	adc	r27, r1
 3d0:	63 9f       	mul	r22, r19
 3d2:	aa 27       	eor	r26, r26
 3d4:	f0 0d       	add	r31, r0
 3d6:	b1 1d       	adc	r27, r1
 3d8:	aa 1f       	adc	r26, r26
 3da:	64 9f       	mul	r22, r20
 3dc:	66 27       	eor	r22, r22
 3de:	b0 0d       	add	r27, r0
 3e0:	a1 1d       	adc	r26, r1
 3e2:	66 1f       	adc	r22, r22
 3e4:	82 9f       	mul	r24, r18
 3e6:	22 27       	eor	r18, r18
 3e8:	b0 0d       	add	r27, r0
 3ea:	a1 1d       	adc	r26, r1
 3ec:	62 1f       	adc	r22, r18
 3ee:	73 9f       	mul	r23, r19
 3f0:	b0 0d       	add	r27, r0
 3f2:	a1 1d       	adc	r26, r1
 3f4:	62 1f       	adc	r22, r18
 3f6:	83 9f       	mul	r24, r19
 3f8:	a0 0d       	add	r26, r0
 3fa:	61 1d       	adc	r22, r1
 3fc:	22 1f       	adc	r18, r18
 3fe:	74 9f       	mul	r23, r20
 400:	33 27       	eor	r19, r19
 402:	a0 0d       	add	r26, r0
 404:	61 1d       	adc	r22, r1
 406:	23 1f       	adc	r18, r19
 408:	84 9f       	mul	r24, r20
 40a:	60 0d       	add	r22, r0
 40c:	21 1d       	adc	r18, r1
 40e:	82 2f       	mov	r24, r18
 410:	76 2f       	mov	r23, r22
 412:	6a 2f       	mov	r22, r26
 414:	11 24       	eor	r1, r1
 416:	9f 57       	subi	r25, 0x7F	; 127
 418:	50 40       	sbci	r21, 0x00	; 0
 41a:	9a f0       	brmi	.+38     	; 0x442 <__DATA_REGION_LENGTH__+0x42>
 41c:	f1 f0       	breq	.+60     	; 0x45a <__DATA_REGION_LENGTH__+0x5a>
 41e:	88 23       	and	r24, r24
 420:	4a f0       	brmi	.+18     	; 0x434 <__DATA_REGION_LENGTH__+0x34>
 422:	ee 0f       	add	r30, r30
 424:	ff 1f       	adc	r31, r31
 426:	bb 1f       	adc	r27, r27
 428:	66 1f       	adc	r22, r22
 42a:	77 1f       	adc	r23, r23
 42c:	88 1f       	adc	r24, r24
 42e:	91 50       	subi	r25, 0x01	; 1
 430:	50 40       	sbci	r21, 0x00	; 0
 432:	a9 f7       	brne	.-22     	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
 434:	9e 3f       	cpi	r25, 0xFE	; 254
 436:	51 05       	cpc	r21, r1
 438:	80 f0       	brcs	.+32     	; 0x45a <__DATA_REGION_LENGTH__+0x5a>
 43a:	0c 94 34 02 	jmp	0x468	; 0x468 <__fp_inf>
 43e:	0c 94 bc 01 	jmp	0x378	; 0x378 <__fp_szero>
 442:	5f 3f       	cpi	r21, 0xFF	; 255
 444:	e4 f3       	brlt	.-8      	; 0x43e <__DATA_REGION_LENGTH__+0x3e>
 446:	98 3e       	cpi	r25, 0xE8	; 232
 448:	d4 f3       	brlt	.-12     	; 0x43e <__DATA_REGION_LENGTH__+0x3e>
 44a:	86 95       	lsr	r24
 44c:	77 95       	ror	r23
 44e:	67 95       	ror	r22
 450:	b7 95       	ror	r27
 452:	f7 95       	ror	r31
 454:	e7 95       	ror	r30
 456:	9f 5f       	subi	r25, 0xFF	; 255
 458:	c1 f7       	brne	.-16     	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
 45a:	fe 2b       	or	r31, r30
 45c:	88 0f       	add	r24, r24
 45e:	91 1d       	adc	r25, r1
 460:	96 95       	lsr	r25
 462:	87 95       	ror	r24
 464:	97 f9       	bld	r25, 7
 466:	08 95       	ret

00000468 <__fp_inf>:
 468:	97 f9       	bld	r25, 7
 46a:	9f 67       	ori	r25, 0x7F	; 127
 46c:	80 e8       	ldi	r24, 0x80	; 128
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	08 95       	ret

00000474 <__fp_nan>:
 474:	9f ef       	ldi	r25, 0xFF	; 255
 476:	80 ec       	ldi	r24, 0xC0	; 192
 478:	08 95       	ret

0000047a <__fp_pscA>:
 47a:	00 24       	eor	r0, r0
 47c:	0a 94       	dec	r0
 47e:	16 16       	cp	r1, r22
 480:	17 06       	cpc	r1, r23
 482:	18 06       	cpc	r1, r24
 484:	09 06       	cpc	r0, r25
 486:	08 95       	ret

00000488 <__fp_pscB>:
 488:	00 24       	eor	r0, r0
 48a:	0a 94       	dec	r0
 48c:	12 16       	cp	r1, r18
 48e:	13 06       	cpc	r1, r19
 490:	14 06       	cpc	r1, r20
 492:	05 06       	cpc	r0, r21
 494:	08 95       	ret

00000496 <__fp_round>:
 496:	09 2e       	mov	r0, r25
 498:	03 94       	inc	r0
 49a:	00 0c       	add	r0, r0
 49c:	11 f4       	brne	.+4      	; 0x4a2 <__fp_round+0xc>
 49e:	88 23       	and	r24, r24
 4a0:	52 f0       	brmi	.+20     	; 0x4b6 <__fp_round+0x20>
 4a2:	bb 0f       	add	r27, r27
 4a4:	40 f4       	brcc	.+16     	; 0x4b6 <__fp_round+0x20>
 4a6:	bf 2b       	or	r27, r31
 4a8:	11 f4       	brne	.+4      	; 0x4ae <__fp_round+0x18>
 4aa:	60 ff       	sbrs	r22, 0
 4ac:	04 c0       	rjmp	.+8      	; 0x4b6 <__fp_round+0x20>
 4ae:	6f 5f       	subi	r22, 0xFF	; 255
 4b0:	7f 4f       	sbci	r23, 0xFF	; 255
 4b2:	8f 4f       	sbci	r24, 0xFF	; 255
 4b4:	9f 4f       	sbci	r25, 0xFF	; 255
 4b6:	08 95       	ret

000004b8 <_exit>:
 4b8:	f8 94       	cli

000004ba <__stop_program>:
 4ba:	ff cf       	rjmp	.-2      	; 0x4ba <__stop_program>
